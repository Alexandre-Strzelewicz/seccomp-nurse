
I got SECCOMPed and all I got was theses syscalls: read, write, sigreturn and _exit.

* System calls
*** Processor implementation

  On x86, userspace processes run in ring 3, while the kernel is in
  ring 0. Only the kernel can do the interface between the resources
  and the processes.

  A resource can be an access to a hardware device, a kernel object or
  any kind of IPC. In other words, each time it is needed to do such
  action, the userspace application has to make a request to the
  kernel; this is what we call a system call (syscall), basically,
  this is the transition from a ring to another one.

  Historically, on Linux and x86, the best known method for performing
  a syscall is to generate an interruption (the classic =int $0x80=
  instruction) which is trapped by the kernel and then processed.

  It was the most efficient way until the Pentium 4, after that, it
  became the slowest mechanism available (XXX, give the reference to
  the benchmark on LKML). The best method became the =sysenter/sysexit=
  instructions on =x86_32= which has the same usage than =int $0x80=:

#+BEGIN_src asm
  mov $1, %eax   ;; __NR_exit = 1
  mov $42, %ebx  ;; status = 42
  sysenter       ;; perform the syscall!
#+END_src

  On AMD64, a similar mechanism exists: syscall/sysret.

  Usually, except shellcodes, syscalls are generated by the libc and
  depending on the processor, using one solution or another can have
  strong impact on performances but Linux distributions provide only
  one compiled version of the libc: it has to run equally well on all
  CPU versions. Thus, there was a need of an abstraction layer which
  would be called by the libc and which would choose the best
  mechanism at runtime.

  This is the kernel's job: the kernel is compiled with all mechanisms
  and selects the best one at boot time. Once a method is chosen, it
  exposes a function to userspace calling directly the selected
  methods. This way of exposing page is called a Virtual Dynamical
  Shared Object, or VDSO.

  In the libc, a system call is just a matter of calling a function.

  Here is a call to =_exit()=:

#+BEGIN_src asm
  movl $1, %eax   ;; __NR_exit = 1
  movl $0, %ebx   ;; status    = 0
  call *%gs:0x10  ;; Here, the offset (0x10) is platform-dependent
                  ;; The memory page %gs:0x10 is located in the VDSO
#+END_src

*** Virtual Dynamic Shared Object

  A Virtual Dynamic Shared Object (VDSO) is a page maintained by the
  kernel and exposed to userspace by mapping this page into its
  address space as we can it in the mapping file:

#+BEGIN_src txt
$ cat /proc/self/maps
08048000-08051000 r-xp 00000000 fd:01 14450888   /bin/cat
08051000-08052000 rw-p 00009000 fd:01 14450888   /bin/cat
083d7000-083f8000 rw-p 00000000 00:00 0          [heap]
b7475000-b7633000 r--p 00000000 fd:01 592041     /usr/lib/locale/locale-archive
b7633000-b7634000 rw-p 00000000 00:00 0 
b7634000-b7775000 r-xp 00000000 fd:01 5769153    /lib/i686/cmov/libc-2.10.2.so
b7775000-b7777000 r--p 00141000 fd:01 5769153    /lib/i686/cmov/libc-2.10.2.so
b7777000-b7778000 rw-p 00143000 fd:01 5769153    /lib/i686/cmov/libc-2.10.2.so
b7778000-b777b000 rw-p 00000000 00:00 0 
b7794000-b7796000 rw-p 00000000 00:00 0 
b7796000-b7797000 r-xp 00000000 00:00 0          [vdso]
b7797000-b77b3000 r-xp 00000000 fd:01 2818106    /lib/ld-2.10.2.so
b77b3000-b77b4000 r--p 0001b000 fd:01 2818106    /lib/ld-2.10.2.so
b77b4000-b77b5000 rw-p 0001c000 fd:01 2818106    /lib/ld-2.10.2.so
bfafd000-bfb12000 rw-p 00000000 00:00 0          [stack]
#+END_src

  Here, the VDSO is one page long (0x1000, or 4096 bytes). It contains
  the syscall interface, but also some shared variables (low level
  information like rdtsc counter real-time timer, stack canary, etc.)

  The selection of the right method is done by the Linux kernel in
  =arch/x86/vdso/vdso32-setup.c= in the =sysenter_setup= function
  (which is called very early in the kernel initialization by
  =identify_boot_cpu()=).

#+BEGIN_src c
  int __init sysenter_setup(void)
  {
      void *syscall_page = (void *)get_zeroed_page(GFP_ATOMIC);
      const void *vsyscall;
      size_t vsyscall_len;
  
      vdso32_pages[0] = virt_to_page(syscall_page);
  
  #ifdef CONFIG_X86_32
      gate_vma_init();
  #endif
  
      if (vdso32_syscall()) {
          vsyscall = &vdso32_syscall_start;
          vsyscall_len = &vdso32_syscall_end - &vdso32_syscall_start;
      } else if (vdso32_sysenter()){
          vsyscall = &vdso32_sysenter_start;
          vsyscall_len = &vdso32_sysenter_end - &vdso32_sysenter_start;
      } else {
          vsyscall = &vdso32_int80_start;
          vsyscall_len = &vdso32_int80_end - &vdso32_int80_start;
      }
  
      memcpy(syscall_page, vsyscall, vsyscall_len);
      relocate_vdso(syscall_page);
  
      return 0;
  }
#+END_src

  The implementation of the sysenter instruction is in
  =arch/x86/vdso/vdso32/sysenter.S=. The routine called by the libc
  (with the =call *%gs:0x10=) is named =__kernel_vsyscall= :

#+BEGIN_src asm
  __kernel_vsyscall:
  .LSTART_vsyscall:
      push %ecx
  .Lpush_ecx:
      push %edx
  .Lpush_edx:
      push %ebp
  .Lenter_kernel:
      movl %esp,%ebp
      sysenter
    /* 7: align return point with nop's to make disassembly easier */
    .space 7,0x90

    /* 14: System call restart point is here! (SYSENTER_RETURN-2) */
    jmp .Lenter_kernel
    /* 16: System call normal return point is here! */
VDSO32_SYSENTER_RETURN: /* Symbol used by sysenter.c via vdso32-syms.h */
    pop %ebp
.Lpop_ebp:
    pop %edx
.Lpop_edx:
    pop %ecx
.Lpop_ecx:
    ret
#+END_src

  Linus Torvalds is the proud owner of this code because he managed to
  handle the system call restarting thanks to a CPU particularity:
  when the kernel is done with a system call and want to give back the
  control to the process, it just have to perform the =sysexit=
  instruction. 

  Prior to that, the kernel specified to the CPU that at =sysexit= time,
  it has to jump to a specific static address. This address is the
  =VDSO32_SYSENTER_RETURN= routine.

* SECCOMP
*** Introduction

  SECCOMP is a Linux-only feature introduced in 2.6.23 (2005) by
  Andrea Arcangeli, initially designed for grid computing
  applications. The idea was to sell CPU times to the public by
  running untrusted binaries.

  When a process goes into SECCOMP mode, it can only do 4 syscalls:
  read, write, _exit and sigreturn. The kernel will enforce this
  limitation by killing (by a SIGKILL signal) the process if an
  unauthorized system call is made.

  The security warranty here is pretty strong: the only way to evade
  the protection is to use file descriptors already opened or access
  to shared memory.

*** Purpose

  SECCOMP is the perfect solution for a sandbox: the attack surface of
  the kernel is really minimal. For the record, in the whole kernel security
  history, no vulnerability were ever found in theses syscalls.

  The downside of this feature is its limitation! Once in SECCOMP
  mode, it is impossible to do anything except some
  computations. Furthermore, the action of entering in SECCOMP mode is
  voluntary: the program needs to issue itself a =prctl()= with
  appropriate arguments. That means that the application needs to be
  developed specifically.

  The purpose of a sandbox is to run untrusted binaries without
  requiring modifications of the sources. Currently, there are two
  main problems:

  - Enter in SECCOMP mode

  - Prevent the untrusted process from issuing system call

  Both problems need to be solved without requiring a
  recompilation. This is what was investigated in this report.

*** Entering in SECCOMP mode

  Basically, we need to inject a =prctl()= into a given process. The
  best known method is to write directly into the memory of the
  process by using the =ptrace()= interface.

  Beside the evident problems of portability and the inherent
  difficulties of injecting instructions in a process, this solution
  was not investigated because of its hackish nature.

  Instead, lets take a look at a simple C program:

#+BEGIN_src txt
$ objdump -f a.out
a.out:     file format elf32-i386
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080482e0
#+END_src

  The entry point of the binary, 0x080482e0, is the =_start= routine
  provided by the compiler.

#+BEGIN_src asm
080482e0 <_start>:
 80482e0:       31 ed                   xor    ebp,ebp
 80482e2:       5e                      pop    esi
 80482e3:       89 e1                   mov    ecx,esp
 80482e5:       83 e4 f0                and    esp,0xfffffff0
 80482e8:       50                      push   eax
 80482e9:       54                      push   esp
 80482ea:       52                      push   edx
 80482eb:       68 b0 83 04 08          push   0x80483b0
 80482f0:       68 c0 83 04 08          push   0x80483c0
 80482f5:       51                      push   ecx
 80482f6:       56                      push   esi
 80482f7:       68 94 83 04 08          push   0x8048394
 80482fc:       e8 c7 ff ff ff          call   80482c8 <__libc_start_main@plt>
#+END_src

 It initializes the stack and then calls the "init function" of the GNU
 libc which will eventually execute the =main()= function, at this
 point, the program is effectively ran.

 The interesting property of this routine is how the libc function is
 called: by using the Procedure Linkage Table (PLT). In a few words,
 that means the linker will have to resolve the symbol.

 Thanks to the =LD_PRELOAD= feature, it's possible to overload
 symbols. This is how we are issuing the =prctl()= call: by overriding
 the =__libc_start_main= function and calling it on our own to be
 totally transparent.

#+BEGIN_src c
typedef int (*main_t)(int, char **, char **);
main_t realmain;

int __libc_start_main(main_t main,
                      int argc,
                      char *__unbounded *__unbounded ubp_av,
                      ElfW(auxv_t) *__unbounded auxvec,
                      __typeof (main) init,
                      void (*fini) (void),
                      void (*rtld_fini) (void), void *__unbounded
                      stack_end)
{
        void *libc;
        int (*libc_start_main)(main_t main,
                               int,
                               char *__unbounded *__unbounded,
                               ElfW(auxv_t) *,
                               __typeof (main),
                               void (*fini) (void),
                               void (*rtld_fini) (void),
                               void *__unbounded stack_end);

        libc = dlopen("libc.so.6", RTLD_LOCAL  | RTLD_LAZY);
        if (!libc)
                ERROR("  dlopen() failed: %s\n", dlerror());
        libc_start_main = dlsym(libc, "__libc_start_main");
        if (!libc_start_main)
                ERROR("     Failed: %s\n", dlerror());

        realmain = main;
        void (*__malloc_initialize_hook) (void) = my_malloc_init;
        return (*libc_start_main)(wrap_main, argc, ubp_av, auxvec,
        init, fini, rtld_fini, stack_end);
}
#+END_src

 In a nutshell:

   1. The first parameter of the function is the address of the =main=
   2. We open the libc library object
   3. We find the location of the original =__libc_start_main=
   4. We save the original =main= function into a global variable
   5. We call the original =__libc_start_main= by replacing the
      original =main= by our own (=wrap_main=) shown here:

#+BEGIN_src c
int wrap_main(int argc, char **argv, char **environ)
{
	if (prctl(PR_SET_SECCOMP, 1, 0, 0) == -1) {
		perror("prctl(PR_SET_SECCOMP) failed");
		printf("Maybe you don't have the CONFIG_SECCOMP support built into your kernel?\n");
		exit(1);
	}

	(*realmain)(argc, argv, environ);
}
#+END_src


  At this point, the original =main()= is called and the program is
  executed under SECCOMP. The drawback of this method is its
  incompatibility with statically linked binary. In this case, the
  =_start= routine calls directly =__libc_start_main= function without
  using the PLT.

  There is still the option of modifying the memory with some
  =ptrace()= calls or rewriting some bits of the binary file.

*** Interception of syscalls

  Now that the application is running under SECCOMP, it's not possible
  anymore to do a syscall (except =read=, =write=, =_exit= and
  =sigreturn=). Because we made the assumption that the sandboxed
  program was not designed to run SECCOMP, we have to prevent it from
  issuing such forbidden call.

  Thus, we need to intercept the syscall before the kernel, process it
  if possible and emulate the kernel behavior. The interception of
  syscalls is usually done with the =ptrace()= interface, the main
  drawback of this method is the lack of debugging mean: because all
  debuggers use =ptrace= and a process can only be traced once, that
  means that each bug would be a nightmare.

  Furthermore, the =ptrace= interface is known to be crippled and a
  lot of security bugs have been found, fortunately, this was from the
  tracer side, but there was some advisories where the tracee could
  harm the tracer process.

  Another solution was investigated based on the analysis of the
  syscall handling in the Libc. We saw in the previous section that
  the syscall was done by making a =call *%gs:0x10=.

***** Hijacking VDSO 

  In order to intercept (legit) sycalls, we need to intercept the
  previous =call= instruction. This is easy, we have to overwrite the
  pointer stored at the address =*%gs:0x10= redirecting to our own
  function.

  This what we do immediatly after turning on SECCOMP:

#+BEGIN_src c
static void hijack_vdso_gate(void) {
	asm("mov %%gs:0x10, %%ebx\n\t"
	    "mov %%ebx, %0\n\t"

	    "mov %1, %%ebx\n\t"
	    "mov %%ebx, %%gs:0x10\n\t"

	    : "=m" (real_handler)
	    : "r" (handler)
	    : "ebx");
} __attribute__((always_inline));
#+END_src

  From now on, every syscalls are trapped by our handler, even the one
  which are "allowed" by SECCOMP.

***** Demultiplexing syscalls

  The purpose of the handler is to look at the syscall requested, see
  if we need to honor it ourself or let the original libc's handler
  runned (which was saved in a global variable).

  Our handler needs to be carefully written in order to not mess up
  with the registers: our function *must not* modify any
  register. That is the reason why it was written in assembly:

#+BEGIN_src c
void handler(void) {
	void (*syscall_proxy_addr)(void) = syscall_proxy;

	asm("cmpl $4, %%eax\n\t"
	    "je do_syscall\n\t"

	    "cmpl $3, %%eax\n\t"
	    "je do_syscall\n\t"

	    "cmpl $0xfc, %%eax\n\t"
            "jne wrapper\n"

            "movl $1, %%eax\n"
	    "jmp do_syscall\n\t"

	    "wrapper:\n\t"
	    "			call *%0\n\t"
	    "			jmp out\n\t"

	    "do_syscall:\n\t"
	    "			call *%1\n\t"
	    "out:		nop\n\t"

	    : /* output */
	    : "m" (syscall_proxy_addr),
	      "m" (real_handler));

	nsyscalls++;
}
#+END_src

  Each time the libc makes a syscall, we either perform the action
  directly or we call our "syscall proxy".

***** Syscall proxy

  Our dispatcher is in fact similar to a "stub", there is no
  intelligence in the untrusted process: everything is done in the
  trusted process.

  Thus, when a syscall is made, every registers are sent to the
  trusted process via the control file descriptor waiting for a
  request for one of the following actions

  The dispatcher can only:

  - Peek or poke memory at a given address

  - Peek a null-terminated string at a given address

  - =_exit()= the program

  - Fake a return value (return value of the emulated syscall)

  Behing theses primitives, the whole logic is done in the trusted
  process.
